@page "/favorites"
@using MacroTracker.Models
@using MacroTracker.Services
@attribute [StreamRendering]
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@inject ILogger<Today> Logger
@inject IDbContextFactory<MacroTrackingDbContext> MacroTrackingDbContextFactory
@inject IHttpContextAccessor httpContextAccessor;


<PageTitle>Manage Favorites</PageTitle>

<h1>Macro Tracker!</h1>
@if (Loading)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Protein</th>
                <th>Carbs</th>
                <th>Fiber</th>
                <th>Fat</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var favorite in FavoriteTemplates)
            {
                <tr>
                    <td>@favorite.Name</td>
                    <td>@favorite.ProteinGrams</td>
                    <td>@favorite.CarbsGrams</td>
                    <td>@favorite.FiberGrams</td>
                    <td>@favorite.FatGrams</td>
                    <td><button class="btn btn-secondary" @onclick="async () => await RemoveFavoriteAsync(favorite.Id)">X</button></td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    bool Loading = true;
    List<MacroEntryFavorite> FavoriteTemplates = new();
    string UserId => httpContextAccessor?.HttpContext?.Request.Headers["X-MS-CLIENT-PRINCIPAL-ID"].ToString() ?? "unknown";
    MacroTrackingDbContext Context = default!;
    protected override async Task OnInitializedAsync()
    {
        Logger.LogDebug("Entering OnInitializedAsync");
        Loading = true;

        try
        {
            Context = await MacroTrackingDbContextFactory.CreateDbContextAsync();
            if(Context is not null && Context.Favorites is not null)
            {
                FavoriteTemplates = await Context.Favorites.Where(e => e.OwnerId == UserId).ToListAsync();

            }
        }
        finally
        {
            Loading = false;   
        }

    }

    async Task RemoveFavoriteAsync(Guid id)
    {
        Logger.LogDebug("Entering RemoveFavorite Id {Id}", id);
        var dbEntry = await Context.Favorites.FindAsync(id);
        if (dbEntry is not null)
        {
            Context.Favorites.Remove(dbEntry);
            await Context.SaveChangesAsync();
        }

        var localEntry = FavoriteTemplates.SingleOrDefault(e => e.Id == id);
        if (localEntry is not null)
        {
            FavoriteTemplates.Remove(localEntry);
        }
    }
}