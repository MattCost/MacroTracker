@page "/today"
@attribute [StreamRendering]
@rendermode InteractiveServer
@using MacroTracker.Models
@using MacroTracker.Services
@using Microsoft.EntityFrameworkCore
@inject ILogger<Today> Logger
@inject IDbContextFactory<MacroTrackingDbContext> MacroTrackingDbContextFactory
@inject PersistentComponentState ApplicationState
@inherits PageBase;
@implements IDisposable


<LocalTimeZoneDetector />

<PageTitle>Macro Tracker</PageTitle>

<h1>Macro Tracker!</h1>

@if (Loading)
{
    <p><em>Loading...</em></p>
}
else
{
    <EntryTableView EntryModels=Entries />

    <div class="m-3">
    <h3>Quick Add</h3>

    @if (Favorites.Any())
        {
            <div class="input-group" style="max-width: fit-content;">
                <span class="input-group-btn">
                    <button class="btn btn-primary" @onclick="async () => await AddFromFavoriteAsync(SelectedFavoriteId)">Add</button>
                </span>

                <InputSelect id="Favorite" Actions @bind-Value="SelectedFavoriteId" autocomplete="off" class="form-select">
                    <option value="@Guid.Empty" selected disabled>Select a Favorite</option>
                    @foreach (var favorite in Favorites)
                    {
                        <option value="@favorite.Id">@favorite.Name</option>
                    }
                </InputSelect>
            </div>
        }
        else
        {
            <div>No Favorites found...</div>
        }
    </div>

    <div class="m-3">
        <h3>Add New Entry</h3>
        <div style="display: flex; flex-flow: row wrap; gap: 5px; align-items: center;">
            <Tracker Name="Protein" @ref="proteinTracker" />
            <Tracker Name="Carbs" @ref="carbTracker" />
            <Tracker Name="Fiber" @ref="fiberTracker" />
            <Tracker Name="Fat" @ref="fatTracker" />
            <div>
                <button class="btn btn-warning" @onclick="ResetAll">Reset All</button>
            </div>
        </div>

        <div>
            <label>
                Favorite Name:
                <InputText @bind-Value="favoriteName" placeholder="Optional Name"></InputText>
            </label>
            <button class="btn btn-primary" @onclick="SaveEntryAsync">Save Entry</button>
        </div>
    </div>


}

@code {
    bool Loading;
    private List<MacroEntryModel> Entries = new();
    List<MacroEntryFavorite> Favorites = new();
    Guid SelectedFavoriteId = Guid.Empty;
    MacroTrackingDbContext Context = default!;
    Tracker proteinTracker = default!;
    Tracker carbTracker = default!;
    Tracker fiberTracker = default!;
    Tracker fatTracker = default!;
    string favoriteName = string.Empty;
    private PersistingComponentStateSubscription _subscription;
    protected override async Task OnInitializedAsync()
    {
        Logger.LogTrace("Entering OnInitializedAsync");
         _subscription = ApplicationState.RegisterOnPersisting(Persist, RenderMode.InteractiveServer);

        Logger.LogTrace("Looking in application state");
        if(ApplicationState.TryTakeFromJson<List<MacroEntryModel>>(nameof(Entries), out var entries))
        {
            Logger.LogTrace("Entries found in state");
            Entries = entries ?? new(); 
        }
        else
        {
            Logger.LogTrace("Entries not found in state, loading from dbContext");
            Loading = true;
            await Task.Delay(2000);

            // Take the Current time in UTC, convert to the users local time. Drop the time part. Convert back to UTC to get the
            var utcNow = DateTime.UtcNow;
            var localNow = UsersTimeFromUTC(utcNow);
            var localToday = localNow.Date;
            var startOfLocalDayInUTC = UsersTimeToUTC(localToday);

            try
            {
                Context = await MacroTrackingDbContextFactory.CreateDbContextAsync();

                if (Context is not null && Context.Entries is not null)
                {
                    var usersEntries = Context.Entries.Where(entry => entry.OwnerId == UserId);
                    Logger.LogDebug("UsersEntries Count {Count}", usersEntries.Count());

                    var todayEntries = usersEntries.Where(entry => entry.DateTime >= startOfLocalDayInUTC);
                    Logger.LogDebug("todayEntries Count {Count}", todayEntries.Count());

                    Entries = await todayEntries.OrderBy(entry => entry.DateTime).ToListAsync();
                    Favorites = await Context.Favorites.Where(e => e.OwnerId == UserId).ToListAsync();
                }
            }
            finally
            {
                Logger.LogTrace("Loading from dbCon text complete");
                Loading = false;
            }
        }
    
        Logger.LogDebug("User Id {UserId}", UserId);
    }


    private Task Persist()
    {
        Task.Delay(100).Wait(); 
        return Task.Run( () => {
            Logger.LogTrace("Entering Persist");
            ApplicationState.PersistAsJson("dummy", 42);
            ApplicationState.PersistAsJson(nameof(Entries), Entries);
        });
    }
    public void Dispose()
    {
        Logger.LogTrace("Entering Dispose");
        _subscription.Dispose();
    }

    async Task RemoveEntryAsync(Guid id)
    {
        var dbEntry = await Context.Entries.FindAsync(id);
        if (dbEntry is not null)
        {
            Context.Entries.Remove(dbEntry);
            await Context.SaveChangesAsync();
        }

        var localEntry = Entries.SingleOrDefault(e => e.Id == id);
        if (localEntry is not null)
        {
            Entries.Remove(localEntry);
        }
    }

    async Task SaveEntryAsync()
    {
        if (UserId == "unknown")
        {
            Logger.LogError("UserId is unknown, unable to add entry");
            return;
        }

        var entry = new MacroEntryModel
            {
                ProteinGrams = proteinTracker.Count,
                CarbsGrams = carbTracker.Count,
                FiberGrams = fiberTracker.Count,
                FatGrams = fatTracker.Count,
                OwnerId = UserId
            };

        Logger.LogDebug("Entering AddNewEntry. Entry {Entry}", entry);

        Logger.LogDebug("Adding Entry to context");
        await Context.AddAsync(entry);

        Logger.LogDebug("Adding entry to page list");
        Entries.Add(entry);

        if (!string.IsNullOrWhiteSpace(favoriteName))
        {
            Logger.LogDebug("Saving entry as Favorite {Name}", favoriteName);

            var favorite = new MacroEntryFavorite
                {
                    Name = favoriteName,
                    ProteinGrams = proteinTracker.Count,
                    CarbsGrams = carbTracker.Count,
                    FiberGrams = fiberTracker.Count,
                    FatGrams = fatTracker.Count,
                    OwnerId = UserId
                };

            Logger.LogDebug("Adding Favorite to context and page model");
            await Context.AddAsync(favorite);
            Favorites.Add(favorite);
        }

        Logger.LogDebug("Saving Database Changes");
        await Context.SaveChangesAsync();

        ResetAll();
    }

    void ResetAll()
    {

        Logger.LogDebug("Resetting Trackers");
        proteinTracker.Reset();
        carbTracker.Reset();
        fatTracker.Reset();
        fiberTracker.Reset();
    }

    async Task AddFromFavoriteAsync(Guid favoriteId)
    {
        if (UserId == "unknown")
        {
            Logger.LogError("UserId is unknown. Unable to add from favorite");
            return;
        }

        Logger.LogDebug("Entering AddFromFavorite. favoriteId {Id}", favoriteId);
        if (favoriteId == Guid.Empty)
        {
            Logger.LogWarning("Invalid Favorite Id provided");
            return;
        }

        MacroEntryModel? entryModel = null;
        var favorite = Favorites.Where(f => f.Id == favoriteId);
        if (favorite.Any())
        {
            Logger.LogDebug("Favorite found in page model");
            entryModel = new MacroEntryModel(favorite.First());
        }
        else
        {
            var x = Context.Favorites.Find(favoriteId);
            if (x != null)
            {
                Logger.LogDebug("Favorite found in Database");
                entryModel = new MacroEntryModel(x);
            }
        }

        if (entryModel != null)
        {
            Logger.LogDebug("Generated Entry {Entry}", entryModel);
            Logger.LogDebug("Adding to Context");
            await Context.AddAsync(entryModel);
            Logger.LogDebug("Saving changes");
            await Context.SaveChangesAsync();
            Logger.LogDebug("Adding to page model");
            Entries.Add(entryModel);
        }
        else
        {
            Logger.LogWarning("Favorite Id {Id} not found", favoriteId);
        }
    }
}
